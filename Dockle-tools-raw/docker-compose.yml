# Use a specific version of the Docker Compose file format for stability.
version: "3.9"

services:
  # Nginx acts as a reverse proxy and serves the frontend application.
  nginx:
    image: nginx:1.27-alpine
    container_name: production_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Mounts the nginx configuration and SSL certificates.
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    networks:
      - frontend-net
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  # The main backend application API.
  api:
    image: my-api-image:1.2.0 # Use a specific, versioned image from your registry.
    container_name: production_api
    build:
      context: ./api
      dockerfile: Dockerfile.prod
    env_file:
      - .env # Load environment variables from the .env file.
    networks:
      - frontend-net
      - backend-net
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1G"

  # PostgreSQL database for persistent data storage.
  db:
    image: postgres:16-alpine
    container_name: production_db
    env_file:
      - .env
    volumes:
      # Use a named volume for persistent database data.
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "2G"

  # Redis for caching and session management.
  redis:
    image: redis:7-alpine
    container_name: production_redis
    networks:
      - backend-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"

# Define the custom networks for secure service isolation.
networks:
  frontend-net:
    driver: bridge
  backend-net:
    driver: bridge

# Define the named volume for database persistence.
volumes:
  postgres-data:
    driver: local